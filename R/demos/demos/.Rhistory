source('preprocess_tp63.R')
2
n
source('preprocess_tp63.R')
source('preprocess_tp63.R')
write.reslts(mmgmos_exprs_refseq, file="mmgmos_exprs_refseq")
boxplot(data.frame(exprs(mmgmos_exprs_refseq)),main="mmgMOS - No norm")
save()
q("yes")
Sweave("tp63.Snw")
Sweave("tp63.Snw")
who()
eset_tp53_RMA <- rma(expdata)
library(affy)
eset_tp53_RMA <- rma(expdata)
objects)~
objects()
eset_tp53_rma <- eset_tp53_rma
eset_tp53_rma <- eset_tp53_RMA
eset_tp53_mmgmos <- mmgmos_exprs_refseq 
par(mfrow=c(1,2))
boxplot(data.frame(exprs(eset_tp53_mmgmos)),main="mmgMOS - Median Normalized")
boxplot(data.frame(exprs(eset_tp53_rma)),main="Standard RMA")
Sweave("tp63.Snw")
help rm
help("rm")
objects()
rm("airquality")
objects()
rm("mmgmos_exprs_refseq")
objects()
rm("expfiles")
rm("mapCdfName")
rm("expdata")
objects
objects()
rm("eset_tp53_RMA")
objects()
q("yes")
Sweave("tp63.Snw")
Sweave("tp63.Snw")
summary(models)
model <- models
summary(model)
summary(model$comp[[1]])
model$comp[[1]]$y
model$comp[[1]]$genes
model$comp[[2]]
model$comp[[1]]$kern
summary(model$comp[[1]]$kern)
objects()
rm("models")
q("yes")
Sweave("tp63.Snw")
warnings()
Sweave
GPplot
objects()
GPplot(model)
GPplot
model$genes
model$B
model$comp[[1]]$B
model$comp[[1]]$D
model$comp[[1]]$S
model$comp[[1]]$predF
model$comp[[1]]$includeNoise
model$comp[[1]]$kern$comp[[1]]
model$comp[[1]]$kern$comp[[1]]$inverseWidth 
Sweave("tp63.Snw")
Sweave("tp63.Snw")
Sweave("tp63.Snw")
Sweave("tp63.Snw")
y
yvar
Ngenes
dim(y)
dim(y)[2]
model <- gpsimCreate(Ngenes, 1, times, y, yvar, options, genes=genes)
y
dim(y)[2]
dim(y)
dim
model <- gpsimCreate(Ngenes, 1, times, y[[1]], yvar[[1]], options, genes=genes)
summary(model)
model.kern
model$kern
model$genes
param <- modelExtractParam(model)
param
exp(param)
model$kern$comp[1]
model$kern$comp[1]$block[1]
model$kern$comp[1]
model$kern$comp[[1]]
model$kern$comp[[1]]$block[[1]]
model$kern$comp[[1]]
model$kern$comp[[1]]$inverseWidth
model$kern$comp[[1]]$comp[[1]]$inverseWidth 
model$kern$comp[[1]]$comp[[1]]$inverseWidth <- 2.3 
param <- modelExtractParam(model)
param
exp(param)
model$kern$comp[[1]]$comp[[2]]$inverseWidth
model$kern$comp[[1]]$comp[[3]]$inverseWidth
param[[2]] <- -2*log(60)
model <- modelExpandParam(model, param)
param <- modelExtractParam(model)
param
model$kern$comp[[1]]$comp[[3]]$inverseWidth
optOptions <- optimiDefaultOptions()
optOptions$maxit <- 300
optOptions$optimiser <- "SCG"
param <- modelExtractParam(model)
cat (c("\n Optimizing genes", genes, sep=" "))
model <- modelOptimise(model, optOptions)
GPplot(model)
param <- modelExtractParam(model)
param
exp(param)
1/0.0006
sqrt(1/0.0006)
modelDisplay(model)
odel <- modelUpdateProcesses(model)
model <- modelUpdateProcesses(model)
GPplot(model)
plot(model
plot(model$predt, model$predF)
plot(model$predt, model$predF, ylim=c(min(model$predF-2*sqrt(model$varF)), max(model$predF+2*sqrt(model$varF))), type="l", lwd=3, xlab="Time", ylab="")
lines(model$predt, model$predF+2*sqrt(model$varF), lty=2, lwd=3, col=2)
lines(model$predt, model$predF-2*sqrt(model$varF), lty=2, lwd=3, col=2)
model$S
model$D
model$B
Sweave("tp63.Snw")
Sweave("tp63.Snw")
Sweave("tp63.Snw")
Sweave("tp63.Snw")
help("par")
Sweave("tp63.Snw")
Sweave("tp63.Snw")
model$includeNoise 
Sweave("tp63.Snw")
objects()
rm("odel")
objects()
summary(eset_tp53_rma)
summary(preprocData)
q("yes")
dim
library(gpsim, lib.loc="~/R-libs")
modelDisplay(model)
model$kern$comp[[1]]$type
model$kern$comp[[1]]$isNegativeS
if(model$kern$comp[[1]]$isNegativeS) cat("yes")
model$kern$comp[[1]]$isStationary 
q("yes")
Sweave("tp63.Rnw")
warnings()
Sweave("tp63.Rnw")
q("yes")
model$kern$comp[[1]]$isStationary 
Sweave("tp63.Rnw")
Sweave("tp63.Rnw")
Sweave("tp63.Rnw")
warnings()
Sweave("tp63.Rnw")
Sweave("tp63.Rnw")
par(mfrow=c(5, 2))
plot(model$predt, model$predF, ylim=c(min(model$predF-2*sqrt(model$varF)), max(model$predF+2*sqrt(model$varF))), type="l", lwd=3, xlab="Time", ylab="")
lines(model$predt, model$predF+2*sqrt(model$varF), lty=2, lwd=3, col=2)
lines(model$predt, model$predF-2*sqrt(model$varF), lty=2, lwd=3, col=2)
title("Inferred Active TF")
for ( j in seq(length=model$numGenes) ) {
  plot(model$predt, model$ypred[,j],
       ylim=c(min(c(model$ypred[,j]-2*sqrt(model$ypredVar[,j]),
         model$y[,j]-2*sqrt(model$yvar[,j]))),
         max(c(model$ypred[,j]+2*sqrt(model$ypredVar[,j]),
               model$y[,j]+2*sqrt(model$yvar[,j])))),
       type="l", lwd=3, xlab="Time",ylab="")
  genename <- genes[j]
  
  title(paste(genename, "mRNA"))
  plotCI(matrix(model$timesCell[[j+1]]), matrix(model$y[,j]),
         uiw=2*sqrt(model$yvar[,j]), lwd=3, col=3, add=TRUE)
  lines(model$predt, model$ypred[,j]+2*sqrt(model$ypredVar[,j]), lty=2, lwd=3, col=2)
  lines(model$predt, model$ypred[,j]-2*sqrt(model$ypredVar[,j]), lty=2, lwd=3, col=2)
}
help(pumaClust )
pumaClust 
objects()
pumaClust(eset_tp53_mmgmos)
cl <- pumaClust(eset_tp53_mmgmos)
summary(cl)
help(pumaClust)
cl$centers
cl$centersigs 
cl$cluster
summary(cl$cluster)
dim(cl$cluster)
cl$cluster 
cl$centersigs 
sum(cl$centersigs )
cl$bic
cl$centers
cl <- pumaClust(eset_tp53_mmgmos, clusters=5)
plot(cl$centers)
plot(cl$centers)
cl$centers[1,]
plot(cl$centers[1,])
model$times
model$times[1]
model$times[2]
plot(model$times[2], cl$centers[1,])
plot(cl$centers[1,])
par()
plot(cl$centers[1,])
par(mfrow=c(1, 1))
plot(cl$centers[1,])
plot(cl$centers[1,], type="l")
cl$centers[1, ]
as.matrix(cl$centers[1, ])
plot(as.matrix(cl$centers[1,]), type="l")
plot(as.matrix(cl$centers[2,]), type="l")
as.matrix(cl$centers[2, ])
as.matrix(cl$centers[3, ])
as.matrix(cl$centers[4, ])
as.matrix(cl$centers[5, ])
as.matrix(cl$centers[5, ])
plot(as.matrix(cl$centers[5, ]))
par(mfrow=c(1, 1))
par(mfrow=c(2, 2))
objects
objects()
rm("i")
rm("optOptions")
q("y")
q("yes")
cl$centers
cl$centers[1]
cl$centers[1,]
plot(cl$centers[1,])
plot(cl$centers[2,])
plot(cl$centers[3,])
plot(cl$centers[4,])
plot(cl$centers[5,])
cl <- pumaClust(eset_tp53_mmgmos, clusters=10)
cl$cluster 
cl$centers
cl$centersigs 
help seq
help("seq")
dim(cl$centers)[2]
dim(cl$centers)[1]
help("plot")
tp53_cl <- cl
par(mfrow=c(5,2))
for(i in seq(from=1, to=dim(tp53_cl$centers)[1])) {
  plot(tp53_cl$centers[i,], type="l")
}
help("plot")
par(mfrow=c(5,2))
for(i in seq(from=1, to=dim(tp53_cl$centers)[1])) {
  plot(tp53_cl$centers[i,], type="l", xlab="", ylab="time")
}
par(mfrow=c(5,2))
for(i in seq(from=1, to=dim(tp53_cl$centers)[1])) {
  plot(tp53_cl$centers[i,], type="l", xlab="time", ylab="", title=c("Cluster", i))
}
warnings()
help("plot")
for(i in seq(from=1, to=dim(tp53_cl$centers)[1])) {
  plot(tp53_cl$centers[i,], type="l", xlab="time", ylab="", main=c("Cluster", i))
}
tp53_cl$centersigs 
par(mfrow=c(5,2))
for(i in seq(from=1, to=dim(tp53_cl$centers)[1])) {
  plot(tp53_cl$centers[i,], type="l", xlab="time", ylab="", main=c("Cluster ", i, " (", tp53_cl$clustersigs[i], ")", sep=""))
}
tp53_cl$clustersigs[1]
for(i in seq(from=1, to=dim(tp53_cl$centers)[1])) {
  plot(tp53_cl$centers[i,], type="l", xlab="time", ylab="", main=c("Cluster ", i, " (", tp53_cl$centersigs[i], ")", sep=""))
}
par(mfrow=c(5,2))
for(i in seq(from=1, to=dim(tp53_cl$centers)[1])) {
  plot(tp53_cl$centers[i,], type="l", xlab="time", ylab="", main=c("Cluster", i, sep=" "))
  cat("Cluster weight ", i, ": ", tp53_cl$centersigs[i], ".", sep="") 
}
for(i in seq(from=1, to=dim(tp53_cl$centers)[1])) {
  plot(tp53_cl$centers[i,], type="l", xlab="time", ylab="", main=c("Cluster", i, sep=" "))
  cat("Cluster weight ", i, ": ", tp53_cl$centersigs[i], ".\n", sep="") 
}
help("bar")
help("plot")
bar
hist
help("hist")
barplot(tp53_cl$centersigs)
barplot(tp53_cl$centersigs, main="Component Weights")
par(mfrow=c(3,4))
for(i in seq(from=1, to=dim(tp53_cl$centers)[1])) {
  plot(tp53_cl$centers[i,], type="l", xlab="time", ylab="", main=c("Component", i, sep=" "))
}
barplot(tp53_cl$centersigs, main="Component Weights")
tp53_cl$cluster 
Sweave("tp63.Rnw")
objects()
quit("yes")
rm("cl")
Sweave("tp63.Rnw")
rm("cl")
objects()
quit("yes")
 biocLite("mm430a2mmvegae")
source("http://www.bioconductor.org/biocLite.R")
 biocLite("mm430a2mmvegae")
source("http://bioconductor.org/biocLite.R")
    biocLite("mm430a2mmvegaeprobe")
source("http://bioconductor.org/biocLite.R")
    biocLite("mm430a2mmvegaecdf")
biocLite("mm430a2mmensg")
library(puma)
library(affy)
library(AnnotationData)
objects()
expdata
library(mouse430a2)
library(Mouse430A_2)
load(ALL)
library(mouse430a2)
expdata <- ReadAffy(filenames=expfiles, celfile.path="/local/data/dibernardo")
library(mouse430a2)
expdata
library(affy)
library(vsn)
library(ALL)
library(mouse430a2)
biocLite("mouse430a2")
library(annotate)
library(mouse430a2.db)
library("mouse430a2.db")
library("hgu95av2.db")
biocLite("mouse430a2.db")
get(probeNames, get(
get(probeNames, env = mouse430a2SYMBOL)
library(mouse430a2.db)
get(probeNames, env = mouse430a2SYMBOL)
probeNames
probeNames = names(which(tp53_cl$cluster==1))
get(probeNames, env = mouse430a2SYMBOL)
get(probeNames[1], env = mouse430a2SYMBOL)
get(probeNames[2], env = mouse430a2SYMBOL)
genes <- probeNames[1:10]
genes
get(genes, env = mouse430a2SYMBOL)
get(genes[1:10], env = mouse430a2SYMBOL)
for(i in seq(along=genes)) {
  geneName[i] <- get(genes[i], env=mouse430a2SYMBOL)
}
genes <- c("1420851_at", "1450055_at", "1452198_at", "1449519_at", "1450014_at", "1437932_a_at", "1449519_at", "1432032_a_at", "1418350_at")
genes <- probeNames[1:10]
geneName <- genes
for(i in seq(along=genes)) {
  geneName[i] <- get(genes[i], env=mouse430a2SYMBOL)
}
geneName
Sweave("tp63.Rnw")
Sweave("tp63.Rnw")
Sweave("tp63.Rnw")
Sweave("tp63.Rnw")
Sweave("tp63.Rnw")
Sweave("tp63.Rnw")
Sweave("tp63.Rnw")
Sweave("tp63.Rnw")
Sweave("tp63.Rnw")
Sweave("tp63.Rnw")
Sweave("tp63.Rnw")
Sweave("tp63.Rnw")
q
q("yes")
